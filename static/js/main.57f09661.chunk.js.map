{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","METHODS","useRef","URL","CREDENTIAL","VALUES","isJSON","ENTIREP","RESPONSE","useEffect","localStorage","getItem","setItem","current","value","checked","innerHTML","style","height","width","display","justifyContent","alignItems","flexDirection","ref","paddding","borderTopLeftRadius","borderBottomLeftRadius","color","background","onChange","e","target","selected","outline","borderRadius","borderTopRightRadius","borderBottomRightRadius","border","onClick","a","axios","withCredentials","catch","err","response","post","JSON","stringify","data","type","margin","cursor","window","location","reload","maxWidth","wordBreak","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57f09661.chunk.js","sourcesContent":["import axios from 'axios'\nimport {useEffect, useRef , useState} from 'react'\nimport './App.css'\nconst array = []\n\nexport default function App() {\n  const [refresh , setRefresh] = useState(1)\n  const METHODS = useRef()\n  const URL = useRef()\n  const CREDENTIAL = useRef()\n  const VALUES = useRef()\n  const isJSON = useRef()\n  const ENTIREP = useRef()\n  const RESPONSE = useRef()\n\n    useEffect(() => {\n      if(!localStorage.getItem(\"POSTHUMAN_METHOD\")) localStorage.setItem(\"POSTHUMAN_METHOD\" , \"GET\")\n      if(!localStorage.getItem(\"POSTHUMAN_URL\")) localStorage.setItem(\"POSTHUMAN_URL\" , \"\")\n      if(!localStorage.getItem(\"POSTHUMAN_CREDENTIAL\")) localStorage.setItem(\"POSTHUMAN_CREDENTIAL\" , false)\n      if(!localStorage.getItem(\"POSTHUMAN_ISJSON\")) localStorage.setItem(\"POSTHUMAN_ISJSON\" , false)\n      if(!localStorage.getItem(\"POSTHUMAN_VALUES\")) localStorage.setItem(\"POSTHUMAN_VALUES\" , [])\n      if(!localStorage.getItem(\"POSTHUMAN_ENTIRE\")) localStorage.setItem(\"POSTHUMAN_ENTIRE\" , \"\")\n      if(!localStorage.getItem(\"POSTHUMAN_RESPONSE\")) localStorage.setItem(\"POSTHUMAN_RESPONSE\" , \"\")\n      METHODS.current.value = localStorage.getItem(\"POSTHUMAN_METHOD\")\n      URL.current.value = localStorage.getItem(\"POSTHUMAN_URL\")\n      CREDENTIAL.current.checked = localStorage.getItem(\"POSTHUMAN_CREDENTIAL\") == \"false\" ? false : true\n      VALUES.current.value = localStorage.getItem(\"POSTHUMAN_VALUES\")\n      isJSON.current.checked = localStorage.getItem(\"POSTHUMAN_ISJSON\")== \"false\" ? false : true\n      RESPONSE.current.innerHTML = localStorage.getItem(\"POSTHUMAN_RESPONSE\")\n      ENTIREP.current.innerHTML = localStorage.getItem(\"POSTHUMAN_ENTIRE\")\n    } , [])\n  return (\n\t<div style={{height:\"100vh\" , width:\"100vw\" , display:\"flex\" , justifyContent:\"center\" , alignItems:\"center\" , flexDirection:\"column\"}}>\n\n    <div>\n      <select ref={METHODS} style={{width:\"5vw\", paddding:0 , height:\"5vh\" , borderTopLeftRadius:\"10px\" , borderBottomLeftRadius:\"10px\", color:\"white\" , background:\"blue\"}} onChange={(e) => localStorage.setItem(\"POSTHUMAN_METHOD\" , e.target.value)}>\n        <option value=\"GET\" selected>GET</option>\n        <option value=\"POST\">POST</option>\n      </select>\n      <input ref={URL} onChange={(e) => {\n        localStorage.setItem(\"POSTHUMAN_URL\" , e.target.value);\n        }} style={{width:\"20vw\" ,  outline:\"none\", paddding:0, height:\"5vh\" , borderRadius:0}}></input>\n      <button  style={{width:\"5vw\" , paddding:0, height:\"5vh\", borderTopRightRadius:\"10px\" , borderBottomRightRadius:\"10px\" , border:0, background:\"blue\" , color:\"white\"}} onClick={async () => {\n        let response\n        // console.\n        if(METHODS.current.value == \"GET\"){\n          try{\n            response = await axios(URL.current.value, {withCredentials:CREDENTIAL.current.checked}).catch(err => {\n              ENTIREP.current.innerHTML = err\n            })\n          }catch(err){\n            // ENTIREP.current.innerHTML = response\n          }\n        }else{\n          response = await axios.post(URL.current.value , {withCredentials:CREDENTIAL.current.checked})\n        }\n        if(isJSON.current.checked){\n          RESPONSE.current.innerHTML = JSON.stringify(response?.data)\n          localStorage.setItem(\"POSTHUMAN_RESPONSE\" , JSON.stringify(response?.data))\n        }else{\n          RESPONSE.current.innerHTML = response.data\n          localStorage.setItem(\"POSTHUMAN_RESPONSE\" , response?.data)\n        }\n        ENTIREP.current.innerHTML = JSON.stringify(response)\n        localStorage.setItem(\"POSTHUMAN_ENTIRE\" , JSON.stringify(response))\n      }}>SEND</button>\n    </div>\n    <div>\n      <span>\n        <input ref={CREDENTIAL} type=\"checkbox\" onChange={(e) => localStorage.setItem(\"POSTHUMAN_CREDENTIAL\" , e.target.checked)}></input>\n        Credentials\n      </span>\n      <span>\n        <input ref={isJSON} type=\"checkbox\" onChange={(e) => localStorage.setItem(\"POSTHUMAN_ISJSON\" , e.target.checked)}></input>\n        Read as JSON\n      </span>\n    </div>\n    <div>\n      <button ref={VALUES} style={{background:\"blue\", margin:\"1vw\" , borderRadius:\"20px\" , width:\"30vw\" , color:\"white\" , border:\"none\", height:\"5vh\", cursor:\"pointer\"}} onClick={() => window.location.reload()}>REFRESH</button>\n    </div>\n    <div>\n      <button  style={{background:\"blue\", margin:\"1vw\" , borderRadius:\"20px\" , width:\"30vw\" , color:\"white\" , border:\"none\", height:\"5vh\", cursor:\"pointer\"}} onClick={() => {\n        URL.current.value = \"\"\n        // localStorage.setItem\n      }}>CLEAR UP</button>\n    </div>\n    <div style={{border:\"2px solid blue\"}}>\n      <h2>DATA:</h2>\n      <p ref={RESPONSE} style={{maxWidth:\"100vw\" , wordBreak:\"break-all\"}}></p>\n    </div>\n    <div style={{border:\"2px solid blue\"}}>\n      <h2>ENTIRE RESPONSE:</h2>\n      <p  ref={ENTIREP} style={{maxWidth:\"100vw\" , wordBreak:\"break-all\"}}></p>\n    </div>\n  </div>\n )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}